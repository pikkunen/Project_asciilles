\documentclass[12pt, a4paper]{article}
%\usepackage[swedish]{babel}
%\usepackage[T1]{fontenc}
%\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{url}
\usepackage{amsmath}
\usepackage{fancyheadings}
\newcommand{\HRule}{\rule{\linewidth}{0.6mm}}

\addtolength{\textheight}{20mm}
\addtolength{\voffset}{-5mm}
\renewcommand{\sectionmark}[1]{\markleft{#1}}


% appendices, \appitem och \appsubitem är för bilagor
\newcounter{appendixpage}

\newenvironment{appendices}{
	\setcounter{appendixpage}{\arabic{page}}
	\stepcounter{appendixpage}
}{
}

\newcommand{\appitem}[2]{
	\stepcounter{section}
	\addtocontents{toc}{\protect\contentsline{section}{\numberline{\Alph{section}}#1}{\arabic{appendixpage}}}
	\addtocounter{appendixpage}{#2}
}

\newcommand{\appsubitem}[2]{
	\stepcounter{subsection}
	\addtocontents{toc}{\protect\contentsline{subsection}{\numberline{\Alph{section}.\arabic{subsection}}#1}{\arabic{appendixpage}}}
	\addtocounter{appendixpage}{#2}
}



%%%%%%%%%%%%%%%%%%%% Change These %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\names}{Elli \textsc{Virtanen}\\
					David \textsc{Pikas}\\
					Wietze \textsc{Schelhaas}}
\newcommand{\teacher}{Carlos \textsc{Penichet}\\
					  Dave \textsc{Clarke}\\
					  Tjark \textsc{Weber}}
\newcommand{\rapportnamn}{Project ASCIIlles}
%\newcommand{\undertitel}{Och en eventuell cool undertitel}
\newcommand{\kursnamn}{Program Design and Data Structures 20c}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}

\begin{titlepage}
	\begin{center}

	\includegraphics{uu_logo.png} \\[1.5cm]
	\Large{\kursnamn}\\ 
	\HRule \\[0.5cm]
	\textsc{\huge{\rapportnamn}}\\
	%\Large{\undertitel} \\
	\HRule \\[0.5cm]
	\vspace{15 mm}


\begin{minipage}{0.4\textwidth}
	\begin{flushleft} \large
		\emph{Authors:}\\
		\names\\
	\end{flushleft}
\end{minipage}
\hfill
\begin{minipage}{0.4\textwidth}
	\begin{flushright} \large
		\emph{Supervisors:}\\
		\teacher\\
	\end{flushright}
\end{minipage}

\vfill
\large Bachelor Programme in Computer Science

\textsc{\large Uppsala Universitet \\ \today}

\end{center}
\end{titlepage}

%%%% stycket är snott från Umeå Universitets rapportmall
% fixar sidfot
\lfoot{\footnotesize{\names}}
\rfoot{\footnotesize{\today}}
\lhead{\sc\footnotesize\rapportnamn}
\rhead{\nouppercase{\sc\footnotesize\leftmark}}
\pagestyle{fancy}
\renewcommand{\headrulewidth}{0.2pt}
\renewcommand{\footrulewidth}{0.2pt}
% skapar innehållsförteckning.
% Tänk på att köra latex 2ggr för att uppdatera allt
\pagenumbering{roman}


\tableofcontents
	
% och lägger in en sidbrytning
\newpage

\pagenumbering{arabic}

	\section{Project description}

		Project ASCIIlles is a short project in the course Program Design and Data Structures teached at Uppsala University during the fall semester 2015 and the spring semester 2016. The subject of this project is to create a program called ASCIIfy which converts an image to ASCII-art. The side effects are that the team gains experience in working with projects and using modules made by others.

		%\emph{I detta avsnitt beskrivs laborationen, dels som en sammanfattning över dess syfte, men även en koppling till orginalspecifikationen			tas upp.}

		% lägg in en underrubrik (\subsection -> spillutrymme)
		\subsection{Program description }

		ACSIIfy scans an image and splits it into smaller segments. The average greyscale value of every segment is calculated and represented as an ASCII-character in the exported into the terminal or as a HTML-file.

		%\subsection{Orginalspecifikation}
			%Specifikationen i sin helhet finns ... nytt stycke skapas när du har en, eller flera, tomma rader någonstans i föregående stycke

	\section{User manual}

	The main.hs file is, as the name suggests the file that will actually run the program. The program takes one to three command-line arguments. The first is the file path to the image that is to be turned into ascii. This argument is mandatory. The other two are the output file and the scale. If no output file is provided, the program will print the result in the terminal. If the output file has the .html extension, some html and css will be added to make it look nicer (namely, line breaks, smaller font-size, monospaced font and better horizontal letter spacing). Scale should be given as a natural number, the bigger the number the smaller the returned ASCII will be. If no scale is given a standard scale will be used.
		
		

		%\emph{I detta avsnitt beskrivs de filer, med tillhörande sökvägar,som ingår i lösningen, samt korta beskrivningar om syftet med	varje fil. Dessutom beskrivs hur man ska handskas med den implementerade lösningen till problemet, i form av instruktioner för hur körning och kompilering av lösningen sker.}
	
		\subsection{Files included in the program }
		
		main.hs | Contains the main function and the functions responsible for loading and writing files.

		imageTo2dlist.hs | Contains the functions to convert an image into a list that represents the pixels of the image.

		asciilate.hs | Contains the functions to convert a list of pixels into ascii-art.
			
		\subsection{How to run}

		To run, run the following line in the terminal
		\begin{footnotesize}
			\begin{verbatim}
				runhaskell main.hs filepath [destination] [scale]
			\end{verbatim}
		\end{footnotesize} 
		
		Example: To run the file dave.jpeg and export it as a HTML-file with the greatest possible resolution one should run the following in the terminal:
		
		\begin{footnotesize}
			\begin{verbatim}
				runhaskell main.hs dave.jpeg dave.html 1
			\end{verbatim}
		\end{footnotesize} 

	\section{Program documentation}

		When the program starts, the firsts thing it does is reads the image/gif from the specified filepath. It does this by calling the functions readImage, readGifImages, these funtions are provided by juicypixels. It will then go ahead and convert the image/images to grayscale. Now that ever pixel is a value between 0 and 255 the program can easily determine what symbol is to be replaced with the pixels. It doesn't necessarily do this with every pixel, it takes a chunk of pixels and gets the average value of that. The chunk size is determend by the scale argument, for instance if you specified a scale of 2 the program would take a chunk containing 2x2 pixels. Chunks with lower values are darker so it should be replaced with a symbol conaining alot of black. Now the program basically creates a string of all the symbols and writes it to the specified file, if the user hasen't specified a location to write the file to it will print the ascii art in the terminal.

		%\emph{I detta avsnitt beskrivs systemet i sin helhet mer i detalj. Datastrukturer och annan intern representation som är central för uppgiftens lösning behandlas. Dessutom beskrivs de olika komponenternas relationer till varandra.}

		%Dessa rubriker behöver inte finnas med, men något i denna stil
		%bör det kanske vara
		%\subsection{Systemöversikt}

		%\subsection{Exekveringsflöde}
			
		%\subsection{Övriga systemdetaljer}

	\section{Algoritm description}
		%\emph{I detta avsnitt beskrivs de algoritmer som anses som icke-triviala i uppgiften.}
		
		\subsection{Algoritm 1}
			
		\subsection{Algoritm 2}	
	
	\section{The solutions limitations}
	
	ASCIIfy is designed to support all types of images that the Haskell library JuicyPixels (used for loading and storing images) supports, which are PNG-files, JPEG-files and GIF-files. The program is not equipped to handle files in the CMYK colorspace. 

	The support of GIF-files is somewhat limited, the framerate for animated GIFs is constant och can thus appear awkward. 

		%\emph{I detta avsnitt beskrivs alla begränsningar som lösningen av
		%	uppgiften innehåller. Detta innefattar även funna begränsningar
		%	som strider mot specifikationen.}
		
		%SKRIV TEXT HÄR...

	\section{Problems and reflections}
		
		The greatest challenge durning this project was not the programming itself, but to understand and to use JuicyPixels.

		%\emph{Här presenteras egna tankar kring uppgiften som sådan samt de problem som uppstått under arbetets gång.}
		

	\section{Test cases}
		%\emph{I detta avsnitt visas ett antal tester som utförts med programmet.Samtliga tester är kommenterade.}
		
		%GLÖM INTE ATT KOMMENTERA TESTER!
		
		%\begin{footnotesize}
			%\begin{verbatim}
				%Utdata kan lämpligtvis återges så här, men tänk på att kommentera dina tester. Lägg märke till att rad-
				%brytningarna och mellanslagen bevaras!
			%\end{verbatim}
		%\end{footnotesize}
		

	% här börjar alla bilagor. Denna måste finnas med även om bara
	% bilagor anges i \begin{appendices} ... \end{appendices}
	\appendix

	\section{Appendixes}
	%\ldots{}ligger direkt i dokumentet

	% bilagor, t.ex. källkod. En tom extrasida kommer att skrivas ut för
	% att få alla sidnummer att stämma
	\begin{appendices}
		\appitem{Some code}{0}
		\appsubitem{\texttt{minfil.c}}{2}
		\appsubitem{\texttt{minfil.h}}{1}
		\appitem{En bilaga på 3 sidor}{3}
	\end{appendices}

\begin{thebibliography}{references}
\bibitem{JuicyPixels}\url{http://hackage.haskell.org/package/JuicyPixels}
\end{thebibliography}

\end{document}
